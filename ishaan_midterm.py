# -*- coding: utf-8 -*-
"""ishaan_midterm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11_Kx99NW7MDqqOT5h92bCDyyttLWzQiL
"""

import pandas as pd
import seaborn as sns
import numpy as np
import scipy as sp

#1. Loading data in to DataFrames
url = 'https://raw.githubusercontent.com/IshaanChawla0001/python-project/main/AAPL%20.csv'
df = pd.read_csv (url)
#2. Check the Data Types of your data columns
# convert the 'Date' column to datetime format
df['Date']= pd.to_datetime(df['Date'])

# Check the format of 'Date' column
df.info()

#3. Dropping unwanted column i.e 'Adj Close'and 'Volume'
df =df.drop(columns=['Adj Close','Volume'])
print(df)
#4. Dropping null values i.e. in APPL.CSV on row 167 has null values once the down code is implementted null values are removed
df = df.dropna(how='any',axis=0)
print(df)

#5. Check for outliers using a box plot or histogram.
# checking maximum how much price varied
sns.boxplot(x=df['High'])

#6. Plot features against each other using a pair plot.
sns.pairplot(df)

#7. Use a HeatMap for finding the correlation between the features(Feature to Feature)
sns.heatmap(df.corr(), annot = True,cmap="YlGnBu")

#8. Use a scatter plot to show the relationship between 2 variables.
sns.relplot(x="High", y="Low", data=df)

#9. merging dataframes
#Creating new column i.e 'DPV' (Daily Price Variation) which will be the difference of higest and lowest share price
df['DPV'] = df['High'] - df['Low'] 
print(df)

#10. slicing data of a particular column i.e 'Date' , DPV
print(df['Date'])
print(df['DPV'])

#12. Uploading data to Numerical Python
numpydata = df.rename_axis('ID').values
#11. Representing data in matrix form
print(numpydata)

#13. Select a slice or part of the data and display
sliced_data = numpydata[:5,:3]
print(sliced_data)

#14.  Use conditions and segregate the data based on the condition (like show data of a feature(column)>,<,= a number)
#Filtering value of Opening share price only for January 2020
start_date = "2020-1-1"
end_date = "2020-1-31"

after_start_date = df["Date"] >= start_date
before_end_date = df["Date"] <= end_date
between_two_dates = after_start_date & before_end_date
filtered_dates = df.loc[between_two_dates]

print(filtered_dates)

#15. Use mathematical and statistical functions using libraries
#Average opening share price of APPLE in January 2020
average_open_price_in_january2020 = sp.mean(df['High'])
print(average_open_price_in_january2020)

average_daily_change = np.mean(df['DPV'])
print(average_daily_change)

#16. Select data based on a category(categorical data based)
#df['Date']
df['Open']
#df['High']
#df['Low']
#df['Close']
#df['DPV']